// backend/src/middleware/auth.ts
import { Request, Response, NextFunction } from 'express'
import jwt from 'jsonwebtoken'

// IMPORTANT: Reuse the SAME JwtUser type used elsewhere (authJwt.ts)
// If you don't have this file, see the note below for an inline type.
import type { JwtUser } from './authJwt'

// Augment Express Request so req.user is available everywhere
declare module 'express-serve-static-core' {
  interface Request {
    user?: JwtUser
  }
}

function getToken(req: Request): string | null {
  const h = req.headers.authorization || (req.headers as any).Authorization
  if (!h) return null
  const s = Array.isArray(h) ? h[0] : h
  const m = /^Bearer\s+(.+)$/i.exec(s)
  return m ? m[1] : null
}

/**
 * Strict auth: 401 if missing/invalid token.
 */
export function requireAuth(req: Request, res: Response, next: NextFunction) {
  const token = getToken(req)
  if (!token) return res.status(401).json({ error: 'auth required' })

  const secret = process.env.JWT_SECRET
  if (!secret) return res.status(500).json({ error: 'server misconfigured: JWT_SECRET missing' })

  try {
    const payload = jwt.verify(token, secret) as Partial<JwtUser> & { sub?: string }
    const normalized: JwtUser = {
      id: (payload.id ?? payload.sub ?? '') as string,
      // role must be non-optional to match your other file
      role: (payload.role ?? 'MODERATOR') as JwtUser['role'],
      email: payload.email,
      // keep raw fields if you use them elsewhere
      ...(payload as any),
    }
    req.user = normalized
    next()
  } catch {
    return res.status(401).json({ error: 'invalid token' })
  }
}

/**
 * Optional auth: attaches req.user if token valid, otherwise continues.
 */
export function requireAuthOptional(req: Request, _res: Response, next: NextFunction) {
  const token = getToken(req)
  const secret = process.env.JWT_SECRET
  if (!token || !secret) return next()

  try {
    const payload = jwt.verify(token, secret) as Partial<JwtUser> & { sub?: string }
    const normalized: JwtUser = {
      id: (payload.id ?? payload.sub ?? '') as string,
      role: (payload.role ?? 'MODERATOR') as JwtUser['role'],
      email: payload.email,
      ...(payload as any),
    }
    req.user = normalized
  } catch {
    // ignore invalid token
  }
  next()
}