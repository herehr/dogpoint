// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?
  role         Role     @default(MODERATOR)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // back-relations
  posts Post[] // ðŸ‘ˆ posts authored by this user (optional author)
}

model Animal {
  id               String            @id @default(cuid())
  name             String?
  jmeno            String?
  description      String?
  popis            String?
  active           Boolean           @default(true)
  main             String?
  galerie          GalerieMedia[]
  adoptionRequests AdoptionRequest[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // back-relations
  posts Post[] // ðŸ‘ˆ posts related to the animal
}

model GalerieMedia {
  id        String   @id @default(cuid())
  url       String
  typ       String   @default("image")
  animal    Animal?  @relation(fields: [animalId], references: [id], onDelete: Cascade)
  animalId  String?
  createdAt DateTime @default(now())
}

model AdoptionRequest {
  id           String    @id @default(cuid())
  animal       Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)
  animalId     String
  name         String
  email        String
  phone        String?
  message      String?
  status       String    @default("NEW")
  monthly      Int?
  lastViewedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  lastSeenAt DateTime?
  endedAt    DateTime?

  @@index([animalId])
  @@index([email, animalId])
}

/**
 * ---------- NEW: Posts with media ----------
 */

model Post {
  id     String  @id @default(cuid())
  title  String
  body   String?
  active Boolean @default(true)

  // relations
  animal   Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  animalId String

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  media PostMedia[] // ðŸ‘ˆ photos/videos attached to post

  createdAt DateTime @default(now())

  @@index([animalId])
  @@index([authorId])
}

model PostMedia {
  id        String   @id @default(cuid())
  url       String
  typ       String   @default("image") // "image" | "video"
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
}
