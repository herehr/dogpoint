generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
/// * =========================
/// * Core models
/// * =========================
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  posts         Post[]
  subscriptions Subscription[]
}

model Animal {
  id               String            @id @default(cuid())
  name             String?
  jmeno            String?
  description      String?
  popis            String?
  active           Boolean           @default(true)
  main             String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  bornYear         Int?
  bornMonth        Int?
  bornDay          Int?
  dobGuessed       Boolean?          @default(false)
  strapline        String?
  adoptionRequests AdoptionRequest[]
  galerie          GalerieMedia[]
  posts            Post[]
  subscriptions    Subscription[]
}

model GalerieMedia {
  id        String   @id @default(cuid())
  url       String
  typ       String   @default("image")
  animalId  String?
  createdAt DateTime @default(now())
  animal    Animal?  @relation(fields: [animalId], references: [id], onDelete: Cascade)
}

model AdoptionRequest {
  id                      String    @id @default(cuid())
  animalId                String
  name                    String
  email                   String
  phone                   String?
  message                 String?
  status                  String    @default("NEW")
  monthly                 Int?
  lastViewedAt            DateTime?
  lastSeenAt              DateTime?
  endedAt                 DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  stripeCustomerId        String?
  stripeSubscriptionId    String?
  stripeCheckoutSessionId String?
  animal                  Animal    @relation(fields: [animalId], references: [id], onDelete: Cascade)

  @@index([animalId])
  @@index([email, animalId])
}

model Post {
  id          String      @id @default(cuid())
  title       String?
  body        String?
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      PostStatus  @default(DRAFT)
  publishAt   DateTime?
  publishedAt DateTime?
  animalId    String
  authorId    String?
  animal      Animal      @relation(fields: [animalId], references: [id], onDelete: Cascade)
  author      User?       @relation(fields: [authorId], references: [id])
  media       PostMedia[]

  @@index([animalId])
  @@index([authorId])
  @@index([status])
  @@index([publishAt])
}

model PostMedia {
  id        String   @id @default(cuid())
  url       String
  typ       String   @default("image")
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

/// *
/// * =========================
/// * Donations / subscriptions (Fio-ready)
/// * =========================
model Subscription {
  id             String             @id @default(cuid())
  userId         String
  animalId       String
  monthlyAmount  Int
  currency       String             @default("CZK")
  provider       PaymentProvider
  providerRef    String?
  variableSymbol String?            @unique
  message        String?
  status         SubscriptionStatus @default(PENDING)
  startedAt      DateTime           @default(now())
  canceledAt     DateTime?
  note           String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  payments       Payment[]
  animal         Animal             @relation(fields: [animalId], references: [id], onDelete: Cascade)
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, animalId, status])
  @@index([userId])
  @@index([animalId])
  @@index([status])
}

model Payment {
  id             String          @id @default(cuid())
  subscriptionId String
  provider       PaymentProvider
  providerRef    String?
  amount         Int
  currency       String          @default("CZK")
  status         PaymentStatus
  paidAt         DateTime?
  failureReason  String?
  createdAt      DateTime        @default(now())
  subscription   Subscription    @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([status])
}

model WebhookEvent {
  id         String          @id @default(cuid())
  provider   PaymentProvider
  rawPayload Json
  processed  Boolean         @default(false)
  createdAt  DateTime        @default(now())
}

model FioCursor {
  id        Int      @id @default(1)
  lastId    String?
  updatedAt DateTime @updatedAt
}

/// *
/// * =========================
/// * Lightweight pledge + payments (for simple flow)
/// * =========================
model Pledge {
  id         String          @id @default(cuid())
  animalId   String
  email      String
  name       String?
  amount     Int
  interval   PaymentInterval @default(MONTHLY)
  method     PaymentMethod
  status     PaymentStatus   @default(PENDING)
  providerId String?
  note       String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  payments   PledgePayment[]

  @@index([email, animalId])
  @@index([status, method])
}

model PledgePayment {
  id         String        @id @default(cuid())
  pledgeId   String
  status     PaymentStatus
  amount     Int
  provider   String?
  providerId String?
  raw        Json?
  createdAt  DateTime      @default(now())
  pledge     Pledge        @relation(fields: [pledgeId], references: [id], onDelete: Cascade)

  @@index([pledgeId])
}

/// *
/// * =========================
/// * Enums
/// * =========================
enum Role {
  USER
  MODERATOR
  ADMIN
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  MOCK
  FIO
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  PAUSED
  CANCELED
}

enum PaymentStatus {
  PENDING
  PAID
  REQUIRES_ACTION
  CANCELED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  BANK
}

enum PaymentInterval {
  MONTHLY
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
}
